(function() {var implementors = {};
implementors["annealers"] = [{"text":"impl&lt;NodeType:&nbsp;Clone + SingleNode&gt; Clone for FixedSingleQuadricModel&lt;NodeType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NodeType::RealType: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl&lt;Single:&nbsp;Clone + SingleNode, Key:&nbsp;Clone + Hash + Debug&gt; Clone for DiscreteNode&lt;Single, Key&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Real&gt; Clone for Spin&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Real&gt; Clone for Binary&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;R:&nbsp;Clone + Real&gt; Clone for TwoVal&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl Clone for BinaryRepr","synthetic":false,"types":[]},{"text":"impl&lt;NodeType:&nbsp;Clone + SingleNode&gt; Clone for SingleSolution&lt;NodeType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NodeType::RealType: Clone,&nbsp;</span>","synthetic":false,"types":[]},{"text":"impl Clone for Quadric","synthetic":false,"types":[]},{"text":"impl Clone for HighOrder","synthetic":false,"types":[]}];
implementors["classical_solver"] = [{"text":"impl&lt;R:&nbsp;Clone + Real&gt; Clone for BetaType&lt;R&gt;","synthetic":false,"types":[]},{"text":"impl&lt;P:&nbsp;Clone + SingleModel&gt; Clone for SimulatedAnnealerGenerator&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P::NodeType: Clone,&nbsp;</span>","synthetic":false,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()