(function() {var implementors = {};
implementors["annealers"] = [{"text":"impl&lt;NodeType, O&gt; RefUnwindSafe for SingleModel&lt;NodeType, O&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NodeType: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;O: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;O as Order&gt;::NodeSetType: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;NodeType as SingleNode&gt;::RealType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;NodeType&gt; RefUnwindSafe for FixedSingleQuadricModel&lt;NodeType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NodeType: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;NodeType as SingleNode&gt;::RealType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Prods&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; RefUnwindSafe for Neighbors&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Single, Key&gt; RefUnwindSafe for DiscreteNode&lt;Single, Key&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Single: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Spin&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for Binary&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for TwoVal&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for BinaryRepr","synthetic":true,"types":[]},{"text":"impl&lt;'a&gt; RefUnwindSafe for BinaryReprIter&lt;'a&gt;","synthetic":true,"types":[]},{"text":"impl&lt;NodeType&gt; RefUnwindSafe for SingleSolution&lt;NodeType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NodeType: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;NodeType as SingleNode&gt;::RealType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, G, P&gt; RefUnwindSafe for AsStructuredSolverGeneratorWrapper&lt;'a, G, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !RefUnwindSafe for UnstructuredEdgeIter","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for Quadric","synthetic":true,"types":[]},{"text":"impl RefUnwindSafe for HighOrder","synthetic":true,"types":[]}];
implementors["classical_solver"] = [{"text":"impl RefUnwindSafe for NoneError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; RefUnwindSafe for BetaType&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P&gt; RefUnwindSafe for SimulatedAnnealerGenerator&lt;'a, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as SingleModelView&gt;::Node: SingleNode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as SingleModelView&gt;::Node as SingleNode&gt;::RealType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'a, P, R&gt; RefUnwindSafe for SimulatedAnnealer&lt;'a, P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: RefUnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as SingleModelView&gt;::Node: SingleNode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as SingleModelView&gt;::Node as SingleNode&gt;::RealType: RefUnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()