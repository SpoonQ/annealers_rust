(function() {var implementors = {};
implementors["annealers"] = [{"text":"impl&lt;NodeType&gt; UnwindSafe for FixedSingleQuadricModel&lt;NodeType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NodeType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;NodeType as SingleNode&gt;::RealType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for FixedSingleProdIter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; UnwindSafe for FixedSingleNeighborIter&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;Single, Key&gt; UnwindSafe for DiscreteNode&lt;Single, Key&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;Key: RefUnwindSafe + UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;Single: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Spin&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for Binary&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for TwoVal&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl UnwindSafe for BinaryRepr","synthetic":true,"types":[]},{"text":"impl&lt;NodeType&gt; UnwindSafe for SingleSolution&lt;NodeType&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;NodeType: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;NodeType as SingleNode&gt;::RealType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;G, P&gt; UnwindSafe for AsStructuredSolverGeneratorWrapper&lt;G, P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;G: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl !UnwindSafe for UnstructuredEdgeIter","synthetic":true,"types":[]},{"text":"impl UnwindSafe for Quadric","synthetic":true,"types":[]},{"text":"impl UnwindSafe for HighOrder","synthetic":true,"types":[]}];
implementors["classical_solver"] = [{"text":"impl UnwindSafe for NoneError","synthetic":true,"types":[]},{"text":"impl&lt;R&gt; UnwindSafe for BetaType&lt;R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P&gt; UnwindSafe for SimulatedAnnealerGenerator&lt;P&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as SingleModel&gt;::NodeType: SingleNode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as SingleModel&gt;::NodeType as SingleNode&gt;::RealType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;P, R&gt; UnwindSafe for SimulatedAnnealer&lt;P, R&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;P: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;R: UnwindSafe,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;P as FixedSingleModel&gt;::NodeType: SingleNode,<br>&nbsp;&nbsp;&nbsp;&nbsp;&lt;&lt;P as FixedSingleModel&gt;::NodeType as SingleNode&gt;::RealType: UnwindSafe,&nbsp;</span>","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()