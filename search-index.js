var searchIndex = JSON.parse('{\
"annealers":{"doc":"Rust bindings of Quantum Annealer, CMOS Annealer, Digital…","i":[[3,"NoneError","annealers","`NoneError` means the error will never be returned. It…",null,null],[4,"BetaType","","The representation of beta schedule of some annealer.…",null,null],[13,"Count","","Specify beta schedule by beta count.",0,null],[13,"CountRange","","Specify beta schedule by beta count and beta range.",0,null],[13,"Schedule","","Specify beta schedule manually. This values should take…",0,null],[0,"prelude","","Re-export often used crates.",null,null],[0,"anneal","","Default annealing implementation.",null,null],[3,"DefaultAnnealerInfo","annealers::anneal","",null,null],[12,"sweeps_per_round","","",1,null],[12,"beta","","",1,null],[3,"DefaultAnnealer","","",null,null],[11,"new","","",1,[[]]],[0,"d_wave","annealers","",null,null],[8,"AnnealerInfo","","Builder pattern of [`Annealer`]. Usually it includes…",null,null],[16,"AnnealerType","","Specialized type of [`Annealer`] which the…",2,null],[16,"ErrorType","","Specialized type of [`Error`] which building or annealing…",2,null],[10,"build_with_ising","","Build [`Annealer`] with given ising model.",2,[[["vec",3],["vec",3],["vec",3]],["result",4]]],[8,"Annealer","","The abstraction of Annealer.",null,null],[11,"threads","","Returns how many processes will be involed when call…",3,[[],["option",4]]],[11,"require_rng","","Returns whether the annealer requires `Rng`.",3,[[]]],[11,"anneal","","The high-layer interface to start annealing process and…",3,[[],[["result",4],["vec",3]]]],[11,"anneal_with_rng","","The high-layer interface to start annealing process and…",3,[[],[["result",4],["vec",3]]]],[11,"generate_schedule","","Generate beta schedule from given parameters. the meanings…",0,[[],["vec",3]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_string","","",4,[[],["string",3]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","annealers::anneal","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"build_with_ising","","",1,[[["vec",3],["vec",3],["vec",3]],["result",4]]],[11,"anneal_with_rng","","",5,[[],[["vec",3],["noneerror",3],["result",4]]]],[11,"clone","","",1,[[],["defaultannealerinfo",3]]],[11,"clone","","",5,[[],["defaultannealer",3]]],[11,"clone","annealers","",0,[[],["betatype",4]]],[11,"fmt","annealers::anneal","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",5,[[["formatter",3]],["result",6]]],[11,"fmt","annealers","",4,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]]],"p":[[4,"BetaType"],[3,"DefaultAnnealerInfo"],[8,"AnnealerInfo"],[8,"Annealer"],[3,"NoneError"],[3,"DefaultAnnealer"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);