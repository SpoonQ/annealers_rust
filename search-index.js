var searchIndex = JSON.parse('{\
"annealers":{"doc":"","i":[[0,"model","annealers","",null,null],[3,"FixedSingleQuadricModel","annealers::model","",null,null],[3,"FixedSingleProdIter","","",null,null],[3,"FixedSingleNeighborIter","","",null,null],[8,"Model","","",null,null],[16,"NodeType","","",0,null],[16,"NodesIter","","",0,null],[10,"node","","",0,[[]]],[10,"nodes","","",0,[[]]],[11,"size","","",0,[[]]],[8,"SingleModel","","",null,null],[16,"NodeType","","",1,null],[16,"NodeSetType","","",1,null],[16,"NodesIter","","",1,null],[16,"ProdsIter","","",1,null],[16,"NeighborsIter","","",1,null],[16,"Order","","",1,null],[10,"order","","",1,[[]]],[10,"node","","",1,[[]]],[10,"nodes","","",1,[[]]],[11,"size","","",1,[[]]],[11,"get_weight","","",1,[[]]],[10,"get_weight_unchecked","","",1,[[]]],[10,"prods","","",1,[[]]],[10,"neighbors","","",1,[[]]],[11,"calculate_prod","","",1,[[["singlesolution",3]]]],[8,"FixedSingleModel","","",null,null],[16,"NodeType","","",2,null],[16,"Order","","",2,null],[10,"order","","",2,[[]]],[10,"node","","",2,[[]]],[10,"size","","",2,[[]]],[11,"get_weight","","",2,[[]]],[10,"get_weight_unchecked","","",2,[[]]],[11,"new","","",3,[[]]],[11,"add_weight","","",3,[[]]],[11,"new","","",4,[[]]],[11,"new","","",5,[[]]],[0,"node","annealers","",null,null],[3,"DiscreteNode","annealers::node","",null,null],[3,"Spin","","",null,null],[3,"Binary","","",null,null],[3,"TwoVal","","",null,null],[8,"Node","","",null,null],[16,"RealType","","",6,null],[8,"SingleNode","","",null,null],[16,"RealType","","",7,null],[10,"get_value","","",7,[[]]],[11,"calculate_prod","","",7,[[]]],[11,"new","","",8,[[]]],[11,"new","","",9,[[]]],[11,"new","","",10,[[]]],[0,"repr","annealers","",null,null],[3,"BinaryRepr","annealers::repr","",null,null],[11,"new_random","","",11,[[]]],[11,"with_len_unchecked","","",11,[[]]],[11,"from_vec","","",11,[[]]],[11,"to_vec","","",11,[[],["vec",3]]],[11,"len","","",11,[[]]],[11,"get","","",11,[[]]],[11,"set","","",11,[[]]],[11,"get_unchecked","","",11,[[]]],[11,"flip","","",11,[[]]],[11,"flip_unchecked","","",11,[[]]],[0,"set","annealers","",null,null],[8,"NodeSet","annealers::set","",null,null],[16,"Iter","","",12,null],[11,"into_set","","",12,[[],["btreeset",3]]],[11,"into_vec","","",12,[[],["vec",3]]],[11,"from_set","","",12,[[["btreeset",3]],["option",4]]],[11,"from_vec","","",12,[[["vec",3]],["option",4]]],[11,"from_vec_unchecked","","",12,[[["vec",3]],["option",4]]],[10,"from_it","","",12,[[["intoiterator",8]],["option",4]]],[10,"to_it","","",12,[[]]],[11,"len","","",12,[[]]],[0,"solution","annealers","",null,null],[3,"SingleSolution","annealers::solution","",null,null],[12,"state","","",13,null],[12,"energy","","",13,null],[12,"occurrences","","",13,null],[8,"Solution","","",null,null],[16,"NodeType","","",14,null],[11,"from_value","","",13,[[]]],[11,"from_vec","","",13,[[]]],[11,"from_state","","",13,[[["binaryrepr",3]]]],[11,"compare_energy","","",13,[[],[["ordering",4],["option",4]]]],[11,"with_energy","","",13,[[]]],[11,"calculate_energy","","",13,[[]]],[11,"get_unchecked","","",13,[[]]],[0,"solver","annealers","Solver module contains abstraction of many solver type.",null,null],[3,"AsStructuredSolverGeneratorWrapper","annealers::solver","",null,null],[3,"UnstructuredEdgeIter","","",null,null],[8,"SolverGenerator","","",null,null],[16,"SolverType","","",15,null],[16,"ErrorType","","",15,null],[11,"value_range","","",15,[[]]],[10,"generate","","",15,[[],["result",4]]],[8,"StructuredSolverGenerator","","",null,null],[10,"nodes","","",16,[[],[["box",3],["iterator",8]]]],[10,"prods","","",16,[[],[["box",3],["iterator",8]]]],[8,"UnstructuredSolverGenerator","","",null,null],[16,"Order","","",17,null],[10,"order","","",17,[[]]],[11,"size","","",17,[[],["option",4]]],[11,"to_structured","","",17,[[],["asstructuredsolvergeneratorwrapper",3]]],[8,"Solver","","",null,null],[16,"ErrorType","","",18,null],[16,"SolutionType","","",18,null],[8,"ClassicalSolver","","",null,null],[10,"solve_with_rng","","",19,[[],[["vec",3],["result",4]]]],[8,"AsyncSolver","","",null,null],[10,"solve_async","","",20,[[],[["pin",3],["box",3]]]],[8,"SyncSolver","","",null,null],[10,"solve","","",21,[[],[["vec",3],["result",4]]]],[0,"variable","annealers","",null,null],[8,"Real","annealers::variable","",null,null],[18,"MAX","","",22,null],[18,"MIN","","",22,null],[10,"as_f64","","",22,[[]]],[10,"from_i32","","",22,[[]]],[10,"from_f64","","",22,[[]]],[10,"is_default","","",22,[[]]],[10,"abs","","",22,[[]]],[10,"min","","",22,[[]]],[10,"max","","",22,[[]]],[10,"nan_or","","",22,[[]]],[10,"is_finite","","",22,[[]]],[0,"prelude","annealers","",null,null],[0,"order","","",null,null],[3,"Quadric","annealers::order","",null,null],[3,"HighOrder","","",null,null],[8,"Order","","",null,null],[16,"NodeSetType","","",23,null],[10,"order","","",23,[[]]],[11,"new","","",24,[[]]],[11,"node","annealers::model","",3,[[]]],[11,"nodes","","",3,[[]]],[11,"size","","",3,[[]]],[11,"order","","",3,[[]]],[11,"node","","",3,[[]]],[11,"nodes","","",3,[[]]],[11,"prods","","",3,[[]]],[11,"neighbors","","",3,[[]]],[11,"get_weight","","",3,[[]]],[11,"get_weight_unchecked","","",3,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"from","","",4,[[]]],[11,"into","","",4,[[]]],[11,"into_iter","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"vzip","","",4,[[]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"into_iter","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"vzip","","",5,[[]]],[11,"from","annealers::node","",25,[[]]],[11,"into","","",25,[[]]],[11,"to_owned","","",25,[[]]],[11,"clone_into","","",25,[[]]],[11,"borrow","","",25,[[]]],[11,"borrow_mut","","",25,[[]]],[11,"try_from","","",25,[[],["result",4]]],[11,"try_into","","",25,[[],["result",4]]],[11,"type_id","","",25,[[],["typeid",3]]],[11,"vzip","","",25,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"to_owned","","",8,[[]]],[11,"clone_into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"vzip","","",9,[[]]],[11,"from","","",10,[[]]],[11,"into","","",10,[[]]],[11,"to_owned","","",10,[[]]],[11,"clone_into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"vzip","","",10,[[]]],[11,"from","annealers::repr","",11,[[]]],[11,"into","","",11,[[]]],[11,"to_owned","","",11,[[]]],[11,"clone_into","","",11,[[]]],[11,"borrow","","",11,[[]]],[11,"borrow_mut","","",11,[[]]],[11,"try_from","","",11,[[],["result",4]]],[11,"try_into","","",11,[[],["result",4]]],[11,"type_id","","",11,[[],["typeid",3]]],[11,"vzip","","",11,[[]]],[11,"from","annealers::solution","",13,[[]]],[11,"into","","",13,[[]]],[11,"to_owned","","",13,[[]]],[11,"clone_into","","",13,[[]]],[11,"borrow","","",13,[[]]],[11,"borrow_mut","","",13,[[]]],[11,"try_from","","",13,[[],["result",4]]],[11,"try_into","","",13,[[],["result",4]]],[11,"type_id","","",13,[[],["typeid",3]]],[11,"vzip","","",13,[[]]],[11,"from","annealers::solver","",26,[[]]],[11,"into","","",26,[[]]],[11,"borrow","","",26,[[]]],[11,"borrow_mut","","",26,[[]]],[11,"try_from","","",26,[[],["result",4]]],[11,"try_into","","",26,[[],["result",4]]],[11,"type_id","","",26,[[],["typeid",3]]],[11,"vzip","","",26,[[]]],[11,"from","","",27,[[]]],[11,"into","","",27,[[]]],[11,"into_iter","","",27,[[]]],[11,"borrow","","",27,[[]]],[11,"borrow_mut","","",27,[[]]],[11,"try_from","","",27,[[],["result",4]]],[11,"try_into","","",27,[[],["result",4]]],[11,"type_id","","",27,[[],["typeid",3]]],[11,"vzip","","",27,[[]]],[11,"from","annealers::order","",28,[[]]],[11,"into","","",28,[[]]],[11,"to_owned","","",28,[[]]],[11,"clone_into","","",28,[[]]],[11,"borrow","","",28,[[]]],[11,"borrow_mut","","",28,[[]]],[11,"try_from","","",28,[[],["result",4]]],[11,"try_into","","",28,[[],["result",4]]],[11,"type_id","","",28,[[],["typeid",3]]],[11,"vzip","","",28,[[]]],[11,"from","","",24,[[]]],[11,"into","","",24,[[]]],[11,"to_owned","","",24,[[]]],[11,"clone_into","","",24,[[]]],[11,"borrow","","",24,[[]]],[11,"borrow_mut","","",24,[[]]],[11,"try_from","","",24,[[],["result",4]]],[11,"try_into","","",24,[[],["result",4]]],[11,"type_id","","",24,[[],["typeid",3]]],[11,"vzip","","",24,[[]]],[11,"node","annealers::model","",3,[[]]],[11,"order","","",3,[[]]],[11,"size","","",3,[[]]],[11,"get_weight_unchecked","","",3,[[]]],[11,"get_value","annealers::node","",8,[[]]],[11,"get_value","","",9,[[]]],[11,"get_value","","",10,[[]]],[11,"generate","annealers::solver","",26,[[],["result",4]]],[11,"nodes","","",26,[[],[["box",3],["iterator",8]]]],[11,"prods","","",26,[[],[["box",3],["iterator",8]]]],[11,"order","annealers::order","",28,[[]]],[11,"order","","",24,[[]]],[11,"next","annealers::model","",4,[[],["option",4]]],[11,"next","","",5,[[],["option",4]]],[11,"next","annealers::solver","",27,[[],[["btreeset",3],["option",4]]]],[11,"clone","annealers::model","",3,[[],["fixedsinglequadricmodel",3]]],[11,"clone","annealers::node","",25,[[],["discretenode",3]]],[11,"clone","","",8,[[],["spin",3]]],[11,"clone","","",9,[[],["binary",3]]],[11,"clone","","",10,[[],["twoval",3]]],[11,"clone","annealers::repr","",11,[[],["binaryrepr",3]]],[11,"clone","annealers::solution","",13,[[],["singlesolution",3]]],[11,"clone","annealers::order","",28,[[],["quadric",3]]],[11,"clone","","",24,[[],["highorder",3]]],[11,"cmp","","",28,[[["quadric",3]],["ordering",4]]],[11,"cmp","","",24,[[["highorder",3]],["ordering",4]]],[11,"eq","","",28,[[["quadric",3]]]],[11,"eq","","",24,[[["highorder",3]]]],[11,"ne","","",24,[[["highorder",3]]]],[11,"partial_cmp","","",28,[[["quadric",3]],[["ordering",4],["option",4]]]],[11,"partial_cmp","","",24,[[["highorder",3]],[["ordering",4],["option",4]]]],[11,"lt","","",24,[[["highorder",3]]]],[11,"le","","",24,[[["highorder",3]]]],[11,"gt","","",24,[[["highorder",3]]]],[11,"ge","","",24,[[["highorder",3]]]],[11,"fmt","annealers::repr","",11,[[["formatter",3]],["result",6]]],[11,"fmt","annealers::order","",28,[[["formatter",3]],["result",6]]],[11,"fmt","","",24,[[["formatter",3]],["result",6]]],[11,"index","annealers::solution","",13,[[]]],[11,"hash","annealers::order","",28,[[]]],[11,"hash","","",24,[[]]]],"p":[[8,"Model"],[8,"SingleModel"],[8,"FixedSingleModel"],[3,"FixedSingleQuadricModel"],[3,"FixedSingleProdIter"],[3,"FixedSingleNeighborIter"],[8,"Node"],[8,"SingleNode"],[3,"Spin"],[3,"Binary"],[3,"TwoVal"],[3,"BinaryRepr"],[8,"NodeSet"],[3,"SingleSolution"],[8,"Solution"],[8,"SolverGenerator"],[8,"StructuredSolverGenerator"],[8,"UnstructuredSolverGenerator"],[8,"Solver"],[8,"ClassicalSolver"],[8,"AsyncSolver"],[8,"SyncSolver"],[8,"Real"],[8,"Order"],[3,"HighOrder"],[3,"DiscreteNode"],[3,"AsStructuredSolverGeneratorWrapper"],[3,"UnstructuredEdgeIter"],[3,"Quadric"]]},\
"classical_solver":{"doc":"Default annealing implementation.","i":[[4,"NoneError","classical_solver","`NoneError` means the error will never be returned. It…",null,null],[0,"algo","","",null,null],[5,"simulated_annealing","classical_solver::algo","",null,[[["binaryrepr",3]]]],[0,"beta","classical_solver","",null,null],[4,"BetaType","classical_solver::beta","",null,null],[13,"Count","","Specify beta schedule by beta count.",0,null],[13,"CountRange","","Specify beta schedule by beta count and beta range.",0,null],[13,"Schedule","","Specify beta schedule manually. This values should take…",0,null],[0,"sa","classical_solver","",null,null],[3,"SimulatedAnnealerGenerator","classical_solver::sa","",null,null],[12,"sweeps_per_round","","",1,null],[12,"beta","","",1,null],[3,"SimulatedAnnealer","","",null,null],[11,"new","","",1,[[]]],[11,"from","classical_solver","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_string","","",2,[[],["string",3]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","classical_solver::beta","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","classical_solver::sa","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"clone","classical_solver::beta","",0,[[],["betatype",4]]],[11,"clone","classical_solver::sa","",1,[[],["simulatedannealergenerator",3]]],[11,"fmt","classical_solver::beta","",0,[[["formatter",3]],["result",6]]],[11,"fmt","classical_solver::sa","",1,[[["formatter",3]],["result",6]]],[11,"fmt","classical_solver","",2,[[["formatter",3]],["result",6]]],[11,"fmt","","",2,[[["formatter",3]],["result",6]]],[11,"generate","classical_solver::sa","",1,[[],["result",4]]],[11,"order","","",1,[[],["quadric",3]]],[11,"solve_with_rng","","",3,[[],[["vec",3],["noneerror",4],["result",4]]]]],"p":[[4,"BetaType"],[3,"SimulatedAnnealerGenerator"],[4,"NoneError"],[3,"SimulatedAnnealer"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);