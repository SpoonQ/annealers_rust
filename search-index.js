var searchIndex = JSON.parse('{\
"annealers":{"doc":"Rust bindings of Quantum Annealer, CMOS Annealer, Digital…","i":[[3,"NoneError","annealers","`NoneError` means the error will never be returned. It…",null,null],[4,"BetaType","","The representation of beta schedule of some annealer.…",null,null],[13,"Count","","Specify beta schedule by beta count.",0,null],[13,"CountRange","","Specify beta schedule by beta count and beta range.",0,null],[13,"Schedule","","Specify beta schedule manually. This values should take…",0,null],[0,"prelude","","Re-export often used crates.",null,null],[0,"anneal","","Default annealing implementation.",null,null],[3,"DefaultAnnealerInfo","annealers::anneal","",null,null],[12,"sweeps_per_round","","",1,null],[12,"beta","","",1,null],[3,"DefaultAnnealer","","",null,null],[11,"new","","",1,[[]]],[0,"d_wave","annealers","",null,null],[3,"DWaveAnnealerInfo","annealers::d_wave","",null,null],[12,"endpoint","","",2,null],[12,"token","","",2,null],[12,"machine","","",2,null],[12,"num_reads","","",2,null],[12,"beta","","",2,null],[3,"DWaveAnnealer","","",null,null],[4,"ApiError","","",null,null],[13,"Auth","","",3,null],[13,"Python","","",3,null],[11,"new","","",2,[[]]],[8,"AnnealerInfo","annealers","Builder pattern of [`Annealer`]. Usually it includes…",null,null],[16,"AnnealerType","","Specialized type of [`Annealer`] which the…",4,null],[16,"ErrorType","","Specialized type of [`Error`] which building or annealing…",4,null],[10,"build_with_ising","","Build [`Annealer`] with given ising model.",4,[[["vec",3],["vec",3],["vec",3]],["result",4]]],[8,"Annealer","","The abstraction of Annealer.",null,null],[11,"threads","","Returns how many processes will be involed when call…",5,[[],["option",4]]],[11,"require_rng","","Returns whether the annealer requires `Rng`.",5,[[]]],[11,"anneal","","The high-layer interface to start annealing process and…",5,[[],[["result",4],["vec",3]]]],[11,"anneal_with_rng","","The high-layer interface to start annealing process and…",5,[[],[["result",4],["vec",3]]]],[11,"generate_schedule","","Generate beta schedule from given parameters. the meanings…",0,[[],["vec",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_string","","",6,[[],["string",3]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"vzip","","",6,[[]]],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"to_owned","","",0,[[]]],[11,"clone_into","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"vzip","","",0,[[]]],[11,"from","annealers::anneal","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"vzip","","",1,[[]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"vzip","","",7,[[]]],[11,"from","annealers::d_wave","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"vzip","","",2,[[]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"vzip","","",8,[[]]],[11,"from","","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_string","","",3,[[],["string",3]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"vzip","","",3,[[]]],[11,"build_with_ising","annealers::anneal","",1,[[["vec",3],["vec",3],["vec",3]],["result",4]]],[11,"build_with_ising","annealers::d_wave","",2,[[["vec",3],["vec",3],["vec",3]],[["apierror",4],["result",4]]]],[11,"require_rng","annealers::anneal","",7,[[]]],[11,"anneal_with_rng","","",7,[[],[["noneerror",3],["result",4],["vec",3]]]],[11,"anneal","annealers::d_wave","",8,[[],[["vec",3],["apierror",4],["result",4]]]],[11,"drop","","",8,[[]]],[11,"clone","annealers::anneal","",1,[[],["defaultannealerinfo",3]]],[11,"clone","","",7,[[],["defaultannealer",3]]],[11,"clone","annealers::d_wave","",2,[[],["dwaveannealerinfo",3]]],[11,"clone","annealers","",0,[[],["betatype",4]]],[11,"fmt","annealers::anneal","",1,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","annealers::d_wave","",3,[[["formatter",3]],["result",6]]],[11,"fmt","annealers","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",0,[[["formatter",3]],["result",6]]],[11,"fmt","annealers::d_wave","",3,[[["formatter",3]],["result",6]]],[11,"fmt","annealers","",6,[[["formatter",3]],["result",6]]]],"p":[[4,"BetaType"],[3,"DefaultAnnealerInfo"],[3,"DWaveAnnealerInfo"],[4,"ApiError"],[8,"AnnealerInfo"],[8,"Annealer"],[3,"NoneError"],[3,"DefaultAnnealer"],[3,"DWaveAnnealer"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);